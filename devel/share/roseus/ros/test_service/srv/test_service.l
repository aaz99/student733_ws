;; Auto-generated. Do not edit!


(when (boundp 'test_service::test_service)
  (if (not (find-package "TEST_SERVICE"))
    (make-package "TEST_SERVICE"))
  (shadow 'test_service (find-package "TEST_SERVICE")))
(unless (find-package "TEST_SERVICE::TEST_SERVICE")
  (make-package "TEST_SERVICE::TEST_SERVICE"))
(unless (find-package "TEST_SERVICE::TEST_SERVICEREQUEST")
  (make-package "TEST_SERVICE::TEST_SERVICEREQUEST"))
(unless (find-package "TEST_SERVICE::TEST_SERVICERESPONSE")
  (make-package "TEST_SERVICE::TEST_SERVICERESPONSE"))

(in-package "ROS")





(defclass test_service::test_serviceRequest
  :super ros::object
  :slots (_a _b _c ))

(defmethod test_service::test_serviceRequest
  (:init
   (&key
    ((:a __a) 0)
    ((:b __b) 0)
    ((:c __c) 0)
    )
   (send-super :init)
   (setq _a (round __a))
   (setq _b (round __b))
   (setq _c (round __c))
   self)
  (:a
   (&optional __a)
   (if __a (setq _a __a)) _a)
  (:b
   (&optional __b)
   (if __b (setq _b __b)) _b)
  (:c
   (&optional __c)
   (if __c (setq _c __c)) _c)
  (:serialization-length
   ()
   (+
    ;; int64 _a
    8
    ;; int64 _b
    8
    ;; int64 _c
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64 _a
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _a (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _a) (= (length (_a . bv)) 2)) ;; bignum
              (write-long (ash (elt (_a . bv) 0) 0) s)
              (write-long (ash (elt (_a . bv) 1) -1) s))
             ((and (class _a) (= (length (_a . bv)) 1)) ;; big1
              (write-long (elt (_a . bv) 0) s)
              (write-long (if (>= _a 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _a s)(write-long (if (>= _a 0) 0 #xffffffff) s)))
     ;; int64 _b
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _b (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _b) (= (length (_b . bv)) 2)) ;; bignum
              (write-long (ash (elt (_b . bv) 0) 0) s)
              (write-long (ash (elt (_b . bv) 1) -1) s))
             ((and (class _b) (= (length (_b . bv)) 1)) ;; big1
              (write-long (elt (_b . bv) 0) s)
              (write-long (if (>= _b 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _b s)(write-long (if (>= _b 0) 0 #xffffffff) s)))
     ;; int64 _c
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _c (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _c) (= (length (_c . bv)) 2)) ;; bignum
              (write-long (ash (elt (_c . bv) 0) 0) s)
              (write-long (ash (elt (_c . bv) 1) -1) s))
             ((and (class _c) (= (length (_c . bv)) 1)) ;; big1
              (write-long (elt (_c . bv) 0) s)
              (write-long (if (>= _c 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _c s)(write-long (if (>= _c 0) 0 #xffffffff) s)))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64 _a
#+(or :alpha :irix6 :x86_64)
      (setf _a (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _a (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;; int64 _b
#+(or :alpha :irix6 :x86_64)
      (setf _b (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _b (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;; int64 _c
#+(or :alpha :irix6 :x86_64)
      (setf _c (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _c (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;;
   self)
  )

(defclass test_service::test_serviceResponse
  :super ros::object
  :slots (_square ))

(defmethod test_service::test_serviceResponse
  (:init
   (&key
    ((:square __square) 0.0)
    )
   (send-super :init)
   (setq _square (float __square))
   self)
  (:square
   (&optional __square)
   (if __square (setq _square __square)) _square)
  (:serialization-length
   ()
   (+
    ;; float64 _square
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float64 _square
       (sys::poke _square (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float64 _square
     (setq _square (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(defclass test_service::test_service
  :super ros::object
  :slots ())

(setf (get test_service::test_service :md5sum-) "824d60fc841435159cb0442f45e7ceac")
(setf (get test_service::test_service :datatype-) "test_service/test_service")
(setf (get test_service::test_service :request) test_service::test_serviceRequest)
(setf (get test_service::test_service :response) test_service::test_serviceResponse)

(defmethod test_service::test_serviceRequest
  (:response () (instance test_service::test_serviceResponse :init)))

(setf (get test_service::test_serviceRequest :md5sum-) "824d60fc841435159cb0442f45e7ceac")
(setf (get test_service::test_serviceRequest :datatype-) "test_service/test_serviceRequest")
(setf (get test_service::test_serviceRequest :definition-)
      "int64 a
int64 b
int64 c
---
float64 square

")

(setf (get test_service::test_serviceResponse :md5sum-) "824d60fc841435159cb0442f45e7ceac")
(setf (get test_service::test_serviceResponse :datatype-) "test_service/test_serviceResponse")
(setf (get test_service::test_serviceResponse :definition-)
      "int64 a
int64 b
int64 c
---
float64 square

")



(provide :test_service/test_service "824d60fc841435159cb0442f45e7ceac")


